///////////////////////////////////////////////////////////
//  Register.cs
//  Implementation of the Class Register
//  Generated by Enterprise Architect
//  Created on:      24-nov-2014 22:43:51
//  Original author: Tor Kjetil
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations.Schema;
using Kartverket.Register.Models.Translations;
using System.Globalization;
using Resources;

namespace Kartverket.Register.Models
{
    public class Register
    {
        public Register()
        {
            this.RegisterItems = new HashSet<RegisterItemV2>();
            this.items = new HashSet<RegisterItem>();
            this.subregisters = new HashSet<Register>();
            this.replaces = new HashSet<Version>();
            this.Translations = new TranslationCollection<RegisterTranslation>();
        }
        [Key]
        public Guid systemId { get; set; }
        public virtual ICollection<Version> replaces { get; set; }
        [ForeignKey("owner")]
        public Guid? ownerId { get; set; }
        [Display(Name = "Owner", ResourceType = typeof(Registers))]
        public virtual Organization owner { get; set; }
        [ForeignKey("manager")]
        public Guid? managerId { get; set; }
        public virtual Organization manager { get; set; }
        [Display(Name = "Name", ResourceType = typeof(Registers))]
        public string name { get; set; }
        [Display(Name = "Description", ResourceType = typeof(Registers))]
        public string description { get; set; }
        [ForeignKey("status")]
        public string statusId { get; set; }
        public virtual Status status { get; set; }
        [DataType(DataType.Date), DisplayFormat(DataFormatString = @"{0:dd/MM/yyyy}", ApplyFormatInEditMode = true)]
        public DateTime dateSubmitted { get; set; }
        [DataType(DataType.Date), DisplayFormat(DataFormatString = @"{0:dd/MM/yyyy}", ApplyFormatInEditMode = true)]
        public DateTime modified { get; set; }
        [DataType(DataType.Date), DisplayFormat(DataFormatString = @"{0:dd/MM/yyyy}", ApplyFormatInEditMode = true)]
        public DateTime? dateAccepted { get; set; }

        [Required(ErrorMessageResourceType = typeof(Registers), ErrorMessageResourceName = "ContainedItemClassErrorMessage")]
        [Display(Name = "ContainedItemClass", ResourceType = typeof(Registers))]     
        public string containedItemClass { get; set; }

        public virtual ICollection<RegisterItem> items { get; set; }
        public virtual ICollection<RegisterItemV2> RegisterItems { get; set; }
        [ForeignKey("parentRegister")]
        public Guid? parentRegisterId { get; set; }
        public virtual Register parentRegister { get; set; }
        public virtual ICollection<Register> subregisters { get; set; }
        [Url]
        public string targetNamespace { get; set; }
        public string seoname { get; set; }
        [ForeignKey("versioning")]
        public Guid? versioningId { get; set; }
        public virtual Version versioning { get; set; }
        public int versionNumber { get; set; }

        [ForeignKey("access")]
        public int? accessId { get; set; }
        public virtual accessType access { get; set; }

        public virtual TranslationCollection<RegisterTranslation> Translations { get; set; }

        public void AddMissingTranslations()
        {
            Translations.AddMissingTranslations();
        }

        /// <summary>
        /// Gets Url to current object
        /// </summary>
        /// <returns>Url</returns>
        public virtual string GetObjectUrl()
        {
            if (parentRegisterId == null)
            {
                return "/register/" + seoname;
            }
            else
            {
                return "/subregister/" + parentRegister.seoname + "/" + owner.seoname + "/" + seoname;
            }
        }

        public bool IsServiceAlertRegister()
        {
            return systemId == Guid.Parse("0f428034-0b2d-4fb7-84ea-c547b872b418");
        }

        public bool IsOfTypeDataset()
        {
            if (containedItemClass == "Dataset")
            {
                return true;
            }
            return false;
        }

        public bool IsDokMunicipal()
        {
            return name == "Det offentlige kartgrunnlaget - Kommunalt";
        }

        public Guid GetSystemId()
        {
            if (systemId == null || systemId == Guid.Empty)
            {
                return Guid.NewGuid();
            }
            else
                return systemId;
        }

        public string GetDokMunicipalityUrl()
        {
            return "/register/det-offentlige-kartgrunnlaget-kommunalt";
        }

        public string GetObjectCreateUrl(string municipalityCode = null)
        {
            string url;
            if (parentRegister == null)
            {
                url = seoname + "/ny";
            }
            else {
                url = parentRegister.seoname + "/" + owner.seoname + "/" + seoname + "/ny";
            }

            if (containedItemClass == "Document") return "/dokument/" + url;
            else if (containedItemClass == "CodelistValue") return "/kodeliste/" + url;
            else if (containedItemClass == "Register") return "/subregister/" + url;
            else if (containedItemClass == "Organization") return "/organisasjoner/" + url;
            else if (containedItemClass == "EPSG") return "/epsg/" + url;
            else if (containedItemClass == "NameSpace") return "/navnerom/" + url;
            else if (containedItemClass == "ServiceAlert") return "/tjenestevarsler/" + url;
            else if (containedItemClass == "InspireDataset") return "/inspire/" + url;
            else if (containedItemClass == "Dataset")
            {
                if (IsDokMunicipal())
                {
                    return "/dataset/" + seoname + "/" + municipalityCode + "/ny";
                }
                else {
                    return "/dataset/" + url;
                }
            }
            else {
                return "#";
            }
        }

        public string GetEditObjectUrl()
        {
            if (parentRegister == null)
            {
                return "/rediger/" + seoname;
            }
            else
            {
                return "/subregister/" + parentRegister.seoname + "/" + owner.seoname + "/" + seoname + "/rediger";
            }
        }

        public string GetDeleteObjectUrl()
        {
            if (parentRegister == null)
            {
                return "/slett/" + seoname;
            }
            else
            {
                return "/subregister/" + parentRegister.seoname + "/" + owner.seoname + "/" + seoname + "/slett";
            }
        }

        public bool HasParentRegister()
        {
            if (parentRegister != null)
            {
                return true;
            }
            return false;
        }

        public bool containedItemClassIsOrganization()
        {
            if (containedItemClass == "Organization")
            {
                return true;
            }
            return false;
        }

        public bool containedItemClassIsCodelistValue()
        {
            if (containedItemClass == "CodelistValue")
            {
                return true;
            }
            return false;
        }

        public bool containedItemClassIsDocument()
        {
            if (containedItemClass == "Document")
            {
                return true;
            }
            return false;
        }

        public bool containedItemClassIsDataset()
        {
            if (containedItemClass == "Dataset")
            {
                return true;
            }
            return false;
        }

        public bool containedItemClassIsEPSG()
        {
            if (containedItemClass == "EPSG")
            {
                return true;
            }
            return false;
        }

        public bool containedItemClassIsNameSpace()
        {
            if (containedItemClass == "NameSpace")
            {
                return true;
            }
            return false;
        }

        public bool containedItemClassIsServiceAlert()
        {
            if (containedItemClass == "ServiceAlert")
            {
                return true;
            }
            return false;
        }

        public bool containedItemClassIsRegister()
        {
            if (containedItemClass == "Register")
            {
                return true;
            }
            return false;
        }

        public bool ContainedItemClassIsInspireDataset() {
            if (containedItemClass == "InspireDataset")
            {
                return true;
            }
            return false;
        }

        //end Register

    }//end namespace Datamodell
}