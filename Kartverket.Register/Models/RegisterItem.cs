///////////////////////////////////////////////////////////
//  RegisterItem.cs
//  Implementation of the Class RegisterItem
//  Generated by Enterprise Architect
//  Created on:      24-nov-2014 22:43:53
//  Original author: Tor Kjetil
///////////////////////////////////////////////////////////

using Kartverket.Register.Helpers;
using Kartverket.Register.Services.RegisterItem;
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;



namespace Kartverket.Register.Models
{
    public abstract class RegisterItem
    {
        private RegisterDbContext db = new RegisterDbContext();
        private IRegisterItemService _registerItemService;

        public RegisterItem()
        {
            _registerItemService = new RegisterItemService(db);
        }
        [Key]
        public Guid systemId { get; set; }
        //public virtual ICollection<Version> replaces { get; set; }

        [Display(Name = "Navn:")]
        public string name { get; set; }

        [Display(Name = "Beskrivelse:")]
        public string description { get; set; }

        [ForeignKey("submitter")]
        [Display(Name = "Innsender:")]
        public Guid submitterId { get; set; }
        public virtual Organization submitter { get; set; }

        [Display(Name = "Dato innsendt:")]
        [DataType(DataType.Date), DisplayFormat(DataFormatString = "{0:dd/MM/yyyy}", ApplyFormatInEditMode = true)]
        public DateTime dateSubmitted { get; set; }

        [Display(Name = "Dato endret:")]
        [DataType(DataType.Date), DisplayFormat(DataFormatString = "{0:dd/MM/yyyy}", ApplyFormatInEditMode = true)]
        public DateTime modified { get; set; }

        [ForeignKey("status")]
        [Display(Name = "Status:")]
        public string statusId { get; set; }
        public virtual Status status { get; set; }

        [Display(Name = "Dato godkjent:")]
        [DataType(DataType.Date), DisplayFormat(DataFormatString = @"{0:dd/MM/yyyy}", ApplyFormatInEditMode = true)]
        public DateTime? dateAccepted { get; set; }

        [Display(Name = "Dato Utkast:")]
        [DataType(DataType.Date), DisplayFormat(DataFormatString = "{0:dd/MM/yyyy}", ApplyFormatInEditMode = true)]
        public DateTime? dateNotAccepted { get; set; }

        [Display(Name = "Dato erstattet:")]
        [DataType(DataType.Date), DisplayFormat(DataFormatString = "{0:dd/MM/yyyy}", ApplyFormatInEditMode = true)]
        public DateTime? dateSuperseded { get; set; }

        [Display(Name = "Dato utgått:")]
        [DataType(DataType.Date), DisplayFormat(DataFormatString = "{0:dd/MM/yyyy}", ApplyFormatInEditMode = true)]
        public DateTime? DateRetired { get; set; }

        [Display(Name = "Register:")]
        public virtual Register register { get; set; }
        [ForeignKey("register")]
        public Guid registerId { get; set; }
        public string seoname { get; set; }

        [ForeignKey("versioning")]
        public Guid? versioningId { get; set; }
        public virtual Version versioning { get; set; }

        [Display(Name = "Versjons ID:")]
        public int versionNumber { get; set; }

        [Display(Name = "Utgave:")]
        public string versionName { get; set; }

        [Display(Name = "Dokument url:")]
        public string documentUrl { get; set; }

        [Display(Name = "Godkjenningstekst:")]
        public string approvalDocument { get; set; }

        [Display(Name = "Godkjenningsreferanse:")]
        public string approvalReference { get; set; }

        [Display(Name = "Godkjent")]
        public bool? Accepted { get; set; }
        //end RegisterItem

        /// <summary>
        /// Gets Url to current object
        /// </summary>
        /// <returns>Url</returns>
        public virtual string GetObjectUrl()
        {
            return register.GetObjectUrl() + "/" + submitter.seoname + "/" + seoname;
        }

        public virtual string GetObjectUrl(RegisterItem item)
        {
            if (item is Dataset)
            {
                Dataset dataset = (Dataset)item;
                return dataset.GetDatasetUrl();
            }
            else if (item is Document)
            {
                Document document = (Document)item;
                return document.GetDocumentUrl();
            }
            else {
                return register.GetObjectUrl() + "/" + submitter.seoname + "/" + seoname;
            }
        }

        public virtual string GetObjectEditUrl(RegisterItem item)
        {
            if (item is Document)
            {
                Document document = (Document)item;
                return document.GetDocumentEditUrl();
            }
            else if (item is Dataset)
            {
                Dataset dataset = (Dataset)item;
                return dataset.GetDatasetEditUrl();
            }
            else if (item is EPSG)
            {
                EPSG epsg = (EPSG)item;
                return epsg.GetEPSGEditUrl();
            }
            else if (item is CodelistValue)
            {
                CodelistValue codelistValue = (CodelistValue)item;
                return codelistValue.GetCodelistValueEditUrl();
            }
            else if (item is NameSpace)
            {
                NameSpace nameSpace = (NameSpace)item;
                return nameSpace.GetNameSpaceEditUrl();
            }
            else if (item is Organization)
            {
                Organization organization = (Organization)item;
                return organization.GetOrganizationEditUrl();
            }
            return "#";
        }

        public virtual string GetObjectDeleteUrl(RegisterItem item)
        {
            if (item is Document)
            {
                Document document = (Document)item;
                return document.GetDocumentDeleteUrl();
            }
            else if (item is Dataset)
            {
                Dataset dataset = (Dataset)item;
                return dataset.GetDatasetDeleteUrl();
            }
            else if (item is EPSG)
            {
                EPSG epsg = (EPSG)item;
                return epsg.GetEPSGDeleteUrl();
            }
            else if (item is CodelistValue)
            {
                CodelistValue codelistValue = (CodelistValue)item;
                return codelistValue.GetCodelistValueDeleteUrl();
            }
            else if (item is NameSpace)
            {
                NameSpace nameSpace = (NameSpace)item;
                return nameSpace.GetNameSpaceDeleteUrl();
            }
            else if (item is Organization)
            {
                Organization organization = (Organization)item;
                return organization.GetOrganizationDeleteUrl();
            }
            return "#";
        }

        public virtual Guid GetSystemId()
        {
            if (systemId == null || systemId == Guid.Empty)
            {
                return Guid.NewGuid();
            }
            else {
                return systemId;
            }
        }

        public DateTime GetDateModified()
        {
            return DateTime.Now;
        }

        public DateTime GetDateSubmbitted()
        {
            return DateTime.Now;
        }

        public string GetStatusId(string status = null)
        {
            if (register != null)
            {
                if (register.IsOfTypeDataset())
                {
                    return "Valid";
                }
            }
            if (status == null || statusId == null)
            {
                return "Submitted";
            }
            else
                return status;
        }

        public int GetVersionNr()
        {
            if (versionNumber == 0)
            {
                return 1;
            }
            else
            {
                return versionNumber++;
            }
        }

        public string GetName()
        {
            if (string.IsNullOrWhiteSpace(name))
            {
                return "ikke angitt";
            }
            else
            {          
                return name;
            }
        }

        public string GetDescription()
        {
            return description;
        }

        public Guid? GetVersioningId()
        {
            return versioningId;
        }
    }
}//end namespace Datamodell