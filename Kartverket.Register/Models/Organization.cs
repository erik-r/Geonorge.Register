///////////////////////////////////////////////////////////
//  Organization1.cs
//  Implementation of the Class Organization
//  Generated by Enterprise Architect
//  Created on:      24-nov-2014 22:43:49
//  Original author: Tor Kjetil
///////////////////////////////////////////////////////////

using System.ComponentModel.DataAnnotations;
using Resources;



namespace Kartverket.Register.Models
{
	public class Organization : RegisterItem {
        // logos will be stored in this directory
        public const string DataDirectory = "organizations/";

        [Display(Name = "Organization_Number", ResourceType = typeof(UI))]
        public string number { get; set; }

        [Display(Name = "Organization_Logo", ResourceType = typeof(UI))]
        public string logoFilename { get; set; }

        [Display(Name = "Stor logo")]
        public string largeLogo { get; set; }

        [Display(Name = "Kontaktperson")]
        public string contact { get; set; }

        [Display(Name = "E-postadresse")]
        [DataType(DataType.EmailAddress)] 
        public string epost { get; set; }

        [Display(Name = "Norge digitaltmedlem")]
        public bool? member { get; set; }

        [Display(Name = "Avtale godkjent år")]
        [Range(1000,9999, ErrorMessage = "Skriv inn et årstall yyyy")] 
        public int? agreementYear { get; set; }

        [Display(Name = "Avtaledokument")]
        public string agreementDocumentUrl { get; set; }

        [Display(Name = "Prisskjema/Kalkulator")]
        public string priceFormDocument { get; set; }        

        [Display(Name = "Kortnavn")]
        public string shortname { get; set; }

        /// <summary>
        /// Determines what kind of organization: regular or municipality.
        /// If empty, then regular organization. 
        /// If set to 'municipality' then the municipality specific attributes below should be populated
        /// </summary>
        [Display(Name = "Organisasjonstype")]
        public string OrganizationType { get; set; }

        // municipality specific attributes
        [Display(Name = "Kommunenummer")]
        public string MunicipalityCode { get; set; }
        [Display(Name = "Geografisk senterpunkt - x")]
        public string GeographicCenterX { get; set; }
        [Display(Name = "Geografisk senterpunkt - y")]
        public string GeographicCenterY { get; set; }
        [Display(Name = "Geografisk utstrekning - nord")]
        public string BoundingBoxNorth { get; set; }
        [Display(Name = "Geografisk utstrekning - sør")]
        public string BoundingBoxSouth { get; set; }
        [Display(Name = "Geografisk utstrekning - øst")]
        public string BoundingBoxEast { get; set; }
        [Display(Name = "Geografisk utstrekning - vest")]
        public string BoundingBoxWest { get; set; }


        public virtual string GetOrganizationEditUrl()
        {
            if (register.parentRegister == null)
            {
                return "/organisasjoner/" + register.seoname + "/" + submitter.seoname + "/" + seoname + "/rediger";
            }
            else {
                return "/organisasjoner/" + register.parentRegister.seoname + "/" + register.owner.seoname + "/" + register.seoname + "/" + submitter.seoname + "/" + seoname + "/rediger";
            }
        }

        public virtual string GetOrganizationDeleteUrl()
        {
            if (register.parentRegister == null)
            {
                return "/organisasjoner/" + register.seoname + "/" + submitter.seoname + "/" + seoname + "/slett";
            }
            else {
                return "/organisasjoner/" + register.parentRegister.seoname + "/" + register.owner.seoname + "/" + register.seoname + "/" + submitter.seoname + "/" + seoname + "/slett";
            }
        }

    }//end Organization

    public class OrganizationType
    {
        public static string Regular = "regular";
        public static string Municipality = "municipality";
    }

}//end namespace Datamodell