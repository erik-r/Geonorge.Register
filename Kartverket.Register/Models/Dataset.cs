///////////////////////////////////////////////////////////
//  Dataset.cs
//  Implementation of the Class Dataset
//  Generated by Enterprise Architect
//  Created on:      24-nov-2014 22:43:36
//  Original author: Tor Kjetil
///////////////////////////////////////////////////////////

using System;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

namespace Kartverket.Register.Models
{
    public class Dataset : RegisterItem
    {

        public Dataset()
        {
            Coverage = new List<CoverageDataset>();
        }

        //public int Id { get; set; }

        [Display(Name = "Uuid:")]
        public string Uuid { get; set; }

        [Required(ErrorMessage = "Dette feltet er påkrevd")]
        [ForeignKey("datasetowner")]
        public Guid datasetownerId { get; set; }
        public virtual Organization datasetowner { get; set; }

        [Display(Name = "Merknad:")]
        public string Notes { get; set; }

        [Display(Name = "Bruksområde:")]
        public string SpecificUsage { get; set; }

        [Display(Name = "Produktark url:")]
        public string ProductSheetUrl { get; set; }

        [Display(Name = "Presentasjonsregler url:")]
        public string PresentationRulesUrl { get; set; }

        [Display(Name = "Produktspesifikasjon url:")]
        public string ProductSpecificationUrl { get; set; }

        [Display(Name = "Metadata url:")]
        public string MetadataUrl { get; set; }

        [Display(Name = "Distribusjonsformat:")]
        public string DistributionFormat { get; set; }

        [Display(Name = "Distribusjon url:")]
        public string DistributionUrl { get; set; }

        [Display(Name = "Distribusjonsområde:")]
        public string DistributionArea { get; set; }

        [Display(Name = "WMS url:")]
        public string WmsUrl { get; set; }

        [Display(Name = "Tema:")]
        [ForeignKey("theme")]
        public string ThemeGroupId { get; set; }
        public virtual DOKTheme theme { get; set; }

        [Display(Name = "Miniatyrbilde:")]
        public string datasetthumbnail { get; set; }

        [ForeignKey("dokStatus")]
        [Display(Name = "DOK-status:")]
        public string dokStatusId { get; set; }
        public virtual DokStatus dokStatus { get; set; }

        [Display(Name = "DOK-status godkjent:")]
        [DataType(DataType.Date), DisplayFormat(DataFormatString = @"{0:dd/MM/yyyy}", ApplyFormatInEditMode = true)]
        public DateTime? dokStatusDateAccepted { get; set; }

        public string DatasetType { get; set; }

        public virtual List<CoverageDataset> Coverage { get; set; }

        //Dok delivery statuses
        //Metadata
        [ForeignKey("dokDeliveryMetadataStatus")]
        [Display(Name = "Metadatakvalitet:")]
        public string dokDeliveryMetadataStatusId { get; set; }
        public virtual DokDeliveryStatus dokDeliveryMetadataStatus { get; set; }
        public string dokDeliveryMetadataStatusNote { get; set; }
        //ProductSheet
        [ForeignKey("dokDeliveryProductSheetStatus")]
        [Display(Name = "Produktark:")]
        public string dokDeliveryProductSheetStatusId { get; set; }
        public virtual DokDeliveryStatus dokDeliveryProductSheetStatus { get; set; }
        public string dokDeliveryProductSheetStatusNote { get; set; }
        //PresentationRules
        [ForeignKey("dokDeliveryPresentationRulesStatus")]
        [Display(Name = "Kartografidokumentasjon:")]
        public string dokDeliveryPresentationRulesStatusId { get; set; }
        public virtual DokDeliveryStatus dokDeliveryPresentationRulesStatus { get; set; }
        public string dokDeliveryPresentationRulesStatusNote { get; set; }
        //ProductSpecification
        [ForeignKey("dokDeliveryProductSpecificationStatus")]
        [Display(Name = "Produktspesifikasjon:")]
        public string dokDeliveryProductSpecificationStatusId { get; set; }
        public virtual DokDeliveryStatus dokDeliveryProductSpecificationStatus { get; set; }
        public string dokDeliveryProductSpecificationStatusNote { get; set; }
        //WMS
        [ForeignKey("dokDeliveryWmsStatus")]
        [Display(Name = "WMS-tjeneste:")]
        public string dokDeliveryWmsStatusId { get; set; }
        public virtual DokDeliveryStatus dokDeliveryWmsStatus { get; set; }
        public string dokDeliveryWmsStatusNote { get; set; }
        //WFS
        [ForeignKey("dokDeliveryWfsStatus")]
        [Display(Name = "WFS-tjeneste:")]
        public string dokDeliveryWfsStatusId { get; set; }
        public virtual DokDeliveryStatus dokDeliveryWfsStatus { get; set; }
        public string dokDeliveryWfsStatusNote { get; set; }
        //DistributionArea
        [ForeignKey("dokDeliveryDistributionAreaStatus")]
        [Display(Name = "Dekningskart:")]
        public string dokDeliveryDistributionAreaStatusId { get; set; }
        public virtual DokDeliveryStatus dokDeliveryDistributionAreaStatus { get; set; }
        public string dokDeliveryDistributionAreaStatusNote { get; set; }
        //Distribution
        [ForeignKey("dokDeliveryDistributionStatus")]
        [Display(Name = "Filnedlasting:")]
        public string dokDeliveryDistributionStatusId { get; set; }
        public virtual DokDeliveryStatus dokDeliveryDistributionStatus { get; set; }
        public string dokDeliveryDistributionStatusNote { get; set; }
        //ServiceAlert
        [ForeignKey("dokDeliveryServiceAlertStatus")]
        [Display(Name = "Endringsvarsling:")]
        public string dokDeliveryServiceAlertStatusId { get; set; }
        public virtual DokDeliveryStatus dokDeliveryServiceAlertStatus { get; set; }
        public string dokDeliveryServiceAlertStatusNote { get; set; }
        //GeodataLaw
        [ForeignKey("dokDeliveryGeodataLawStatus")]
        [Display(Name = "Oppfyller geodataloven:")]
        public string dokDeliveryGeodataLawStatusId { get; set; }
        public virtual DokDeliveryStatus dokDeliveryGeodataLawStatus { get; set; }
        public string dokDeliveryGeodataLawStatusNote { get; set; }

        public bool? restricted { get; set; }


        public virtual string GetDatasetUrl()
        {
            return register.GetObjectUrl() + "/" + datasetowner.seoname + "/" + seoname;
        }

        public virtual string GetDatasetEditUrl()
        {
            if (register.parentRegister == null)
            {
                return "/dataset/" + register.seoname + "/" + datasetowner.seoname + "/" + seoname + "/rediger";
            }
            else {
                return "/dataset/" + register.parentRegister.seoname + "/" + register.owner.seoname + "/" + register.seoname + "/" + datasetowner.seoname + "/" + seoname + "/rediger";
            }
        }

        public virtual string GetDatasetDeleteUrl()
        {
            if (register.parentRegister == null)
            {
                return "/dataset/" + register.seoname + "/" + datasetowner.seoname + "/" + seoname + "/slett";
            }
            else {
                return "/dataset/" + register.parentRegister.seoname + "/" + register.owner.seoname + "/" + register.seoname + "/" + datasetowner.seoname + "/" + seoname + "/slett";
            }
        }

        public bool IsNationalDataset()
        {
            return DatasetType == "Nasjonalt";
        }

        public bool IsMunicipalDataset()
        {
            return DatasetType == "Kommunalt";
        }

        public string GetDokStatus()
        {
            if (dokStatusId == null)
            {
                if (IsMunicipalDataset())
                {
                    return "Accepted";
                }
                else
                {
                    return "Proposal";
                }
            }
            else {
                return dokStatusId;
            }
        }

        public DateTime? GetDokStatusDateAccepted()
        {        
            if (dokStatusId == "Accepted")
            {
                if (dokStatusDateAccepted == null)
                {
                    return DateTime.Now;
                }
            }
            return dokStatusDateAccepted;
        }


        public string GetDatasetType()
        {
            if (register.IsDokMunicipal())
            {
                return "Kommunalt";
            }
            else
            {
                return "Nasjonalt";
            }
        }

        public string GetDistributionUrl()
        {
            return DistributionUrl;
        }

        public string GetMetadataUrl()
        {
            return MetadataUrl;
        }

        public string GetPresentationRulesUrl()
        {
            return PresentationRulesUrl;
        }

        public string GetProductSheetUrl()
        {
            return ProductSheetUrl;
        }

        public string GetProductSpecificationUrl()
        {
            return ProductSpecificationUrl;
        }

        public string GetWmsUrl()
        {
            return WmsUrl;
        }

        public string GetDistributionFormat()
        {
            return DistributionFormat;
        }

        public string GetDistributionArea()
        {
            return DistributionArea;
        }

        public string GetNotes()
        {
            return Notes;
        }

        public string GetThemeGroupId()
        {
            return ThemeGroupId;
        }

        public string Getdatasetthumbnail()
        {
            return datasetthumbnail;
        }

        public bool GetCoverageConfirmedByUser(Guid datasetOwnerId) {
            foreach (CoverageDataset coverage in Coverage)
            {
                if (coverage.MunicipalityId == datasetOwnerId)
                {
                    return coverage.ConfirmedDok;
                }
            }
            return false;
        }

        public bool GetCoverageByUser(Guid datasetOwnerId)
        {
            foreach (CoverageDataset coverage in Coverage)
            {
                if (coverage.MunicipalityId == datasetOwnerId)
                {
                    return coverage.Coverage;
                }
            }
            return false;
        }

        public string GetCoverageNoteByUser(Guid datasetownerId)
        {
            if (IsNationalDataset())
            {
                foreach (CoverageDataset coverage in Coverage)
                {
                    if (coverage.MunicipalityId == datasetownerId)
                    {
                        return coverage.Note;
                    }
                }
                return null;
            }
            else {
                return Notes;
            }
        }

        public CoverageDataset GetCoverageByOwner(Guid owner)
        {
            foreach (CoverageDataset coverage in Coverage)
            {
                if (coverage.MunicipalityId == owner)
                {
                    return coverage;
                }
            }
            return null;
        }
    }//end Dataset

}//end namespace Datamodell