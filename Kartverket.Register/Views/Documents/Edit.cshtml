@model Kartverket.Register.Models.Document
﻿@using Kartverket.Register.Helpers

@{
    ViewBag.Title = "Rediger " + Model.name;
}

<script>
    $(document).ready(function () {
        $('.date').datepicker({ dateFormat: "dd/mm/yy" });
    });

    window.onload = function () {
        if (document.getElementById('accepted').checked == true) {
            document.getElementById('retired').hidden = false;
            enable();
        }
        if (document.getElementById('not-accepted').checked == true) {
            document.getElementById('retired').hidden = false;
            disable();
        }
        if (document.getElementById('accepted').checked == false && document.getElementById('not-accepted').checked == false) {
            document.getElementById('retired').hidden = true;
            disable();
        }

        if ((document.getElementById('accepted').checked == true || document.getElementById('not-accepted').checked == true) && @Model.statusId != "Superseded") {
            document.getElementById('retired').hidden = false;
        }

        if (@Model.statusId == "Retired" || @Model.statusId == "Superseded") {
            document.getElementById('accepted').disabled == true
            document.getElementById('not-accepted').disabled == true
        }
    }

    function disable() {
        document.getElementById('approvalDate').hidden = true;
        document.getElementById('approvalDoc').hidden = true;
        document.getElementById('approvalRef').hidden = true;
        if (document.getElementById('accepted').checked == false && document.getElementById('not-accepted').checked == false) {
            document.getElementById('NotAcceptedate').hidden = true;
        }
        else{
            document.getElementById('NotAcceptedate').hidden = false;
        }
    }

    function enable() {
        document.getElementById('approvalDate').hidden = false;
        document.getElementById('approvalDoc').hidden = false;
        document.getElementById('approvalRef').hidden = false;
        document.getElementById('NotAcceptedate').hidden = true;
        document.getElementById('retired').hidden = false;
    }


</script>

@section breadcrumb {

    @if (Model.register.parentRegisterId != null)
    {
        Kartverket.Register.Models.Register mainRegister = HtmlHelperExtensions.mainRegister(Model.register);
        Kartverket.Register.Models.Register parentRegister = Model.register.parentRegister;
        <li><a href="/register/@mainRegister.seoname/">@mainRegister.name</a></li>
        <li>Rediger</li>
        <li><a href="/subregister/@Model.register.parentRegister.seoname/@Model.register.parentRegister.owner.seoname/@Model.register.seoname/@Model.documentowner.seoname/@Model.seoname">@Model.name</a></li>
        <li><a href="/subregister/@Model.register.parentRegister.seoname/@Model.register.parentRegister.owner.seoname/@Model.register.seoname">@Model.register.name</a></li>
        while (parentRegister != null && parentRegister != mainRegister)
        {
            <li><a href="/subregister/@parentRegister.parentRegister.seoname/@parentRegister.parentRegister.owner.seoname/@parentRegister.seoname">@parentRegister.name</a></li>
            parentRegister = parentRegister.parentRegister;
        }
    }
    else
    {
        <li><a href="/register/@Model.register.seoname">@Html.DisplayFor(model => model.register.name)</a></li>
        <li><a href="/register/versjoner/@Model.register.seoname/@Model.documentowner.seoname/@Model.seoname">@Html.DisplayFor(model => model.name)</a></li>
        <li>Rediger</li>
    }
}

<h2>Rediger</h2>
<h4>@Model.name</h4>
<hr />

<form action="@Request.Url.LocalPath" method="post" enctype="multipart/form-data">
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.systemId)
    @Html.HiddenFor(model => model.registerId)
    @Html.HiddenFor(model => model.versionNumber)
    @Html.HiddenFor(model => model.versioningId)
    @Html.HiddenFor(model => model.submitterId)
    @Html.HiddenFor(model => model.statusId)

    <div class="form-horizontal">

        @if (Request.IsAuthenticated)
        {
            if (Model.statusId == "Submitted" || Model.statusId == "Draft")
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.name, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessage("ErrorMessage")
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.description, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.versionName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.versionName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.versionName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.submitterId, "Innsender:", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("submitterId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.submitterId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.documentownerId, "Eier:", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("documentownerId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.documentownerId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.thumbnail, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <input type="file" name="thumbnail" />@Model.thumbnail
                        @Html.ValidationMessageFor(model => model.thumbnail, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.documentUrl, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <input type="file" name="documentfile" />@Model.documentUrl
                        @Html.ValidationMessageFor(model => model.thumbnail, "", new { @class = "text-danger" })
                    </div>
                </div>
                <hr />

                @Html.Hidden("retired", false)
            }
            else {
                @Html.HiddenFor(model => model.name)
                @Html.HiddenFor(model => model.description)
                @Html.HiddenFor(model => model.versionName)
                @Html.HiddenFor(model => model.documentownerId)
                @Html.HiddenFor(model => model.thumbnail)
                @Html.HiddenFor(model => model.documentUrl)
            }
            if (Html.IsGeonorgeAdmin(System.Security.Claims.ClaimsPrincipal.Current.Claims))
            {
                @Html.HiddenFor(model => model.documentownerId)

                <br />
                <h3>Dokumentgodkjenning</h3>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Accepted, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-1">
                            @Html.RadioButtonFor(m => m.Accepted, "true", htmlAttributes: new { @onclick = "enable()", @id = "accepted" }) Ja
                        </div>
                        <div class="col-md-1">
                            @Html.RadioButtonFor(m => m.Accepted, "false", htmlAttributes: new { @onclick = "disable()", @id = "not-accepted" }) Nei
                        </div>
                        <div class="col-md-1" id="retired">
                            @Html.CheckBox("retired", false, new { htmlAttributes = new { @class = "form-control" } }) Utgått
                        </div>
                    </div>

                    <div class="form-group" id="approvalDate">
                        @Html.LabelFor(model => model.dateAccepted, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.dateAccepted, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.dateAccepted, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group" id="NotAcceptedate">
                        @Html.LabelFor(model => model.dateNotAccepted, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.dateNotAccepted, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.dateNotAccepted, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group" id="approvalDoc">
                        @Html.LabelFor(model => model.approvalDocument, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.approvalDocument, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.approvalDocument, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group" id="approvalRef">
                        @Html.LabelFor(model => model.approvalReference, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.approvalReference, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.approvalReference, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <hr />
            }
        }

    </div>
    <div class="form-group">
        
        <input type="submit" value="Lagre" class="btn btn-default pull-right" />
        @if (Model.register.parentRegisterId != null)
        {
            <a href="/subregister/versjoner/@Model.register.parentRegister.seoname/@Model.register.parentRegister.owner.seoname/@Model.register.seoname/@Model.submitter.seoname/@Model.seoname">Tilbake</a>
        }
        else
        {
            <a href="/register/versjoner/@Model.register.seoname/@Model.submitter.seoname/@Model.seoname/">Tilbake</a>
        }
    </div>
</form>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

